3. Create the Jenkinsfile:
In the root directory of the repository, create a new file named Jenkinsfile.
Add the following stages to the Jenkinsfile:
groovy
Copy code
pipeline {
    agent any 

    stages {
        stage('Build') {
            steps {
                sh './gradlew assemble'
            }
        }
        stage('Test') {
            steps {
                sh './gradlew test'
            }
        }
    }
}
4. Commit and Push the Jenkinsfile:
Add, commit, and push the Jenkinsfile to your repository:
bash
Copy code
git add Jenkinsfile
git commit -m "Add Jenkinsfile for CI pipeline"
git push origin main
5. Test the Jenkinsfile:
Run the Pipeline: Ensure that the pipeline runs successfully on commit. Jenkins (or GitHub Actions) should execute the build and test stages.

Simulate a Failure:

Modify the SearchService to always return Collections.emptyList():
java
Copy code
public List<ProductItem> searchProducts(String query) {
    return Collections.emptyList();  // This will break the tests
}
Commit and push this change to trigger the CI pipeline again. The test should fail, demonstrating that the CI setup correctly identifies broken tests.
6. Prepare the Submission:
Option 1: Upload the Jenkinsfile:

If asked to upload the Jenkinsfile, simply upload the file directly.
Option 2: Provide a Fork Repository Link:

Create a .txt file (e.g., fork-repo-link.txt) containing the link to your forked repository. The content might look like this:
arduino
Copy code
https://github.com/your-username/mock-company-webapp